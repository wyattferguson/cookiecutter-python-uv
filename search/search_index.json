{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc0d Pattern - Modern Python Cookiecutter Project","text":"<p>Pattern is a modern, opinionated, cookiecutter template for your next Python project. Included is modern tooling and dependencies with sensible rules and settings. Also included is all the boilerplate documentation, GitHub actions, and project extras you would need to create good foundation for your next python project.</p>"},{"location":"#setup-new-project","title":"Setup New Project","text":"<p>Note</p> <p>Make sure you have UV installed before you start.</p> <p>Create new project:</p> <pre><code>uvx cookiecutter gh:wyattferguson/pattern\n</code></pre> <p>Alternatively you can use Cruft:</p> <pre><code>uvx cruft create gh:wyattferguson/pattern\n</code></pre> <p>Then just follow the prompts, pick the tools you want to install, and watch the magic happen.</p>"},{"location":"#features","title":"Features","text":"<p>Everything comes preconfigured to work out of the box. On setup you can pick and choose what extras to install or to leave behind.</p> <ul> <li>\ud83d\udce6 UV - Package and project manager</li> <li>\ud83e\udd80 Ruff - Linter and code formatter.</li> <li>\ud83d\udc1b Typechecking with Ty or Mypy.</li> <li>\ud83e\uddea Pytest - Testing</li> <li>\ud83d\udd2d Coverage - Test coverage.</li> <li>\ud83c\udfed Nox - Testing in multiple Python environments.</li> <li>\ud83d\udef5 Taskipy - Task runner for CLI shortcuts.</li> <li>\ud83d\udcfc Portray - Doc generation and Github Pages deployment.</li> <li>\ud83d\udce1 PyPI package publishing.</li> <li>\ud83c\udf79 GitHub Templates for documentation, feature requests, general reports, bug reports, and pull requests.</li> <li>\ud83c\udf35 Pre-commit - Linting, formatting, and common bug checks on Git commits.</li> <li>\ud83c\udf69 Changelog, Code of Conduct, and Contributing Guide templates.</li> <li>\ud83d\udc0b Docker support including extensive dockerignore file.</li> <li>\ud83c\udf78 VSCode - Settings and extension integrations.</li> <li>\ud83e\udd16 Dependabot - Dependency scanning for new versions and security alerts.</li> <li>\ud83e\uddd9\u200d\u2642\ufe0f GitHub Actions - Release Drafter, Semantic Pull Requests</li> <li>\ud83d\ude9a Cruft Support - Automatic template updates and validation.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions or suggestions are more then welcome! If you'd like to enhance to this project, please submit a pull request. For major changes, please open an issue first to discuss what you would like to change.</p>"},{"location":"#alternative-cookiecutter-projects","title":"Alternative Cookiecutter Projects","text":"<p>If this cookiecutter isn't your cup of tea, you might like one of these alternatives.</p> <ul> <li>Fpgmaas cookiecutter-uv - fpgmaas version of a cookiecutter using UV.</li> <li>Bosd uv-hypermodern-python - bosd version of a cookiecutter uv project with github deployments.</li> <li>Cookiecutter pypackage - Cookiecutter template for a Python package.</li> <li>Neuroinformatics cookiecutter - Utility to create a basic Python project structure with tests, CI etc.</li> </ul>"},{"location":"#contact-support","title":"Contact + Support","text":"<p>Created by Wyatt Ferguson</p> <p>For any questions or comments heres how you can reach me:</p> <p>Follow me on Github @wyattferguson</p> <p>Email me at wyattxdev@duck.com</p> <p>Follow on BlueSky @wyattf</p>"},{"location":"cli/","title":"\ud83c\udf6d CLI","text":""},{"location":"cli/#built-in-commands","title":"Built-in Commands","text":"<p>Included with your setup is a comprehensive collection of built-in commands to cover your basic needs. All of these commands use Taskipy to simplify commands and give you one simple path to interacting with your app.</p> <pre><code># run src/project_name/project_name.py\ntask run\n\n# run all tests\ntask tests\n\n# run tests with multiple python versions (3.13,3.12,3.11,3.10)\ntask nox\n\n# run test coverage and generate report\ntask coverage\n\n# typechecking with Ty or Mypy\ntask type\n\n# ruff linting\ntask lint\n\n# format with ruff\ntask format\n\n# generate docs &amp; serve\ntask docs\n\n# serve docs\ntask serve\n\n# generate static HTML docs (outputs to ./site/)\ntask html\n</code></pre> <p>Also you can use the command <code>task --list</code> to see a complete list with helper text.</p>"},{"location":"cli/#adding-your-own-commands","title":"Adding Your Own Commands","text":"<p>To add your own commands goto the <code>[tool.taskipy.tasks]</code> section in your <code>pyproject.toml</code> file. Heres an example of adding a task to run Black:</p> <pre><code>[tool.taskipy.tasks]\nblack = \"black path/to/my_module\"\n\n# Alternatively you can add some helper text but its optional\nblack = { cmd = \"black path/to/my_module\", help = \"Format my_module with Black\" }\n</code></pre> <p>To execute that command simply run:</p> <pre><code>task black\n</code></pre>"},{"location":"cli/#references","title":"References","text":"<ul> <li>Taskipy Documentation</li> </ul>"},{"location":"configuration/","title":"\ud83c\udf67 Configuration","text":"<p>All of your config settings can be found in the <code>pyproject.toml</code> file.</p>"},{"location":"configuration/#ruff-rules","title":"Ruff Rules","text":"<p>Ruff is included by default with your setup to cover all your linting and formatting needs. We've tried to pick a reasonable set of rules to follow, and some to ignore. We try and walk the line between a good dev experience and keeping code quality high.</p> <pre><code># pyproject.toml\n\n[tool.ruff]\nline-length = 100\nindent-width = 4\nformat.indent-style = \"space\"\ntarget-version = \"py313\"\nsrc = [\"src\", \"tests\"]\n\n[tool.ruff.lint]\npydocstyle.convention = \"google\"\nfixable = [\"ALL\"]\nselect = [\"ALL\"]\nignore = [\n    \"FA102\", # Flake8-future-annotations\n    \"F401\", # Disable fix for unused imports\n    \"B904\", # Allow raising exceptions without from e\n    \"PLR0913\", # too many arguments\n    \"CPY\", # Flake8-copyright\n    \"T201\", # Debugging print statements\n    \"ERA\", # Eradicate \u2013 detects commented-out code\n    \"BLE001\", # Catch-all exceptions\n    \"D100\", # missing docstring in public module\n    \"D105\", # undocumented magic method\n    \"D107\", # undocumented public init\n    \"D203\", # incorrect-blank-line-before-class\n    \"D205\", # line-between-summary-and-description\n    \"D212\", # multi-line-summary-first-line\n    \"D400\", # missing-trailing-period\n    \"D407\", # missing-dashed-underline-after-section\n    \"S311\", # rand-usage\n]\n</code></pre> <p>Checkout the Ruff Rules Docs to see all the posible rules you have at your finger tips.</p>"},{"location":"configuration/#typechecking-rules","title":"Typechecking Rules","text":"<p>On setup you have a choice of two typecheckers the stable Mypy and the up and coming Ty. Whatever you choose the settings can be found in the <code>pyproject.toml</code> file.</p> <p>Ty default settings:</p> <pre><code>[tool.ty]\nsrc.root = \"./src\"\nenvironment.python = \"./.venv\"\nterminal.output-format = \"concise\"\n</code></pre> <p>Mypy default settings:</p> <pre><code>files = [\"src\", \"tests\"]\nignore_missing_imports = true\ndisallow_untyped_defs = true\ndisallow_any_unimported = false\nno_implicit_optional = true\ncheck_untyped_defs = true\nwarn_return_any = false\nwarn_unused_ignores = true\nshow_error_codes = true\n</code></pre>"},{"location":"configuration/#references","title":"References","text":"<ul> <li>Ruff Documentation</li> <li>Mypy Documentation</li> <li>Ty Documentation</li> </ul>"},{"location":"cruft/","title":"\ud83d\ude9a Cruft","text":"<p>Cruft allows you to maintain all the necessary boilerplate for packaging and building projects separate from the code you intentionally write. As fixes, updates, and changes are pushed to the underlying Cookiecutter project, Cruft makes is super easy to keep you up to date.</p>"},{"location":"cruft/#setup-a-new-project","title":"Setup a New Project","text":"<p>Creating a new project with Cruft is super simple:</p> <pre><code>uvx cruft create gh:wyattferguson/pattern\n</code></pre> <p>Then just follow the prompts, pick the tools you want to install, and watch the magic happen.</p>"},{"location":"cruft/#installation","title":"Installation","text":"<p>To install Cruft globally on your system use this command:</p> <pre><code>uv tool install cruft\n</code></pre>"},{"location":"cruft/#linking-existing-project","title":"Linking Existing Project","text":"<p>If you have a project that you created without Cruft and now want to get updates. Run this command to link your project:</p> <pre><code>cruft link gh:wyattferguson/pattern\n</code></pre>"},{"location":"cruft/#updating-a-project","title":"Updating a Project","text":"<p>Updating your project is a breeze with these commands:</p> <pre><code># Check if update is needed\ncruft check\n\n# Run update\ncruft update\n</code></pre>"},{"location":"cruft/#references","title":"References","text":"<ul> <li>Cruft Documentation</li> <li>Cookiecutter</li> </ul>"},{"location":"documentation/","title":"\ud83d\udcfc Documentation","text":"<p>All your documentation needs are handled by Portray it acts as a layer over entrenched docs tools like pdocs and MkDocs to simply a lot of the most common functions.</p>"},{"location":"documentation/#generating-docs","title":"Generating Docs","text":"<p>The content of your docs will be generated from the doc strings inside your <code>.py</code> files. Here is an example function:</p> <pre><code>def divide(a:int, b:int) -&gt; float:\n    \"\"\"Divide two numbers.\n\n    Args:\n        a (int): The numerator.\n        b (int): The denominator.\n\n    Raises:\n        ZeroDivisionError: If the denominator is zero.\n\n    Returns:\n        float: The result of the division.\n    \"\"\"\n    try:\n        result = a / b\n    except ZeroDivisionError:\n        raise ZeroDivisionError(\"Division by zero is not allowed.\")\n    return result\n</code></pre> <p>Portray is setup to scan everything inside <code>/src</code>, files with a prefix <code>_</code> will be ignored. So <code>_config.py</code> would be skipped when generating the docs.</p> <p>Built-in CLI commands are included for generating, and previewing your docs:</p> <pre><code># generate docs &amp; serve\ntask docs\n\n# serve docs\ntask serve\n\n# generate static HTML docs (outputs to ./site/)\ntask html\n</code></pre>"},{"location":"documentation/#publishing-docs","title":"Publishing Docs","text":"<p>Using Portray publishing your docs to GitHub Pages couldn't be any easier. Make sure all your changes are synced to your repo and run the provided command:</p> <pre><code>task publish\n</code></pre> <p>Note: Your repo must be public or have an upgraded account to deploy docs to Github Pages.</p>"},{"location":"documentation/#adding-static-pages","title":"Adding Static Pages","text":"<p>To add a static page to your docs, create a <code>.md</code> file in the <code>docs</code> directory and it will be automatically included. If you want to add folders, or organize your docs in a certain way take a look at the Portray Examples.</p>"},{"location":"documentation/#themes","title":"Themes","text":"<p>You can modify the color scheme, primary, and accent color inside your <code>pyproject.toml</code>. The default settings are:</p> <pre><code>[tool.portray.mkdocs.theme]\nname = \"material\"\ncustom_dir = \"docs\"\npalette = {scheme= \"slate\", primary=\"deep purple\", accent=\"purple\"}\n</code></pre> <p>To add custom css to your docs, add the <code>extra_css</code> field to your <code>pyproject.toml</code> settings. Note that <code>extra_css</code> bases out of the <code>docs</code> folder. Heres an example</p> <pre><code>[tool.portray.mkdocs]\n# points to /docs/css/extra.css\nextra_css = [\"css/extra.css\"]\n</code></pre> <p>Portray is compatible with all Mkdocs Themes.</p>"},{"location":"documentation/#references","title":"References","text":"<ul> <li>GitHub Pages</li> <li>Portray Documentation</li> <li>MKDocs Guide</li> </ul>"},{"location":"github/","title":"\ud83e\udd16 Github","text":""},{"location":"github/#issues-templates","title":"Issues Templates","text":"<p>Templates have been included for common GitHub issues: Bug Reports, Feature Requests, General Feedback, Documentation, and Pull Requests. All of these can be found in the <code>.github/</code> folder. All these templates are good to go out of the box and should cover most usecases but can be easily customized. Check out the GitHub Templates for more details.</p>"},{"location":"github/#dependabot","title":"Dependabot","text":"<p>Dependabot provides automatic security and version updates, along with dependency alerts, to keep your app secure and up-to-date. Dependabot is configured to do weekly scans of your dependencies, and pull requests will be prefixed with \"DBOT\". These settings can be adjusted in the <code>.github/dependabot.yml</code> file.</p>"},{"location":"github/#setup-guide","title":"Setup Guide","text":"<p>To setup Dependabot scans for your project follow these steps:</p> <ol> <li>Go to the \"Settings -&gt; Advanced Security\" tab in your repository.</li> <li>Under the \"Dependabot\" section enable the options you want to monitor, we recommend the \"Dependabot security updates\" at the minimum.</li> </ol>"},{"location":"github/#github-actions","title":"Github Actions","text":"<p>GitHub Actions makes it easy to automate all your software workflows. We've included two useful GitHub Actions, a Release Drafter and a Pull Request Title Enforcer.</p>"},{"location":"github/#release-drafter","title":"Release Drafter","text":"<p>Release Drafter creates your next release notes as pull requests are merged into master. Saving you time pulling together all the details from each commit and giving you a well formatted draft for your release. The settings for this action can be found <code>.github/release-drafter.yml</code> and the action itself is found at <code>.github/workflows/release-drafter.yml</code></p>"},{"location":"github/#pull-request-title-enforcer","title":"Pull Request Title Enforcer","text":"<p>Pull Request Title Enforcer makes sure every pull request to your repo is prefixed with a proper type: feat, fix, docs, style, refactor, perf, test, build, ci, revert, deps. The settings for this action can be found <code>.github/workflows/pull-requests.yml</code></p>"},{"location":"github/#pre-commit-hooks","title":"Pre Commit Hooks","text":"<p>Pre commit hooks are included in the <code>.pre-commit-hooks.yaml</code> file, these are scripts that run before your git commit to ensure code quality, security, and standards are enforced before they get committed to your repo.</p>"},{"location":"github/#github_1","title":"GitHub","text":"<p>The included GitHub Pre Commit Hooks ensure valid config files, some simple formatting clean up, and any potential conflicts.</p> <pre><code>hooks:\n  - id: check-case-conflict\n  - id: check-merge-conflict\n  - id: end-of-file-fixer\n  - id: trailing-whitespace\n  - id: check-yaml\n  - id: check-toml\n  - id: check-json\n</code></pre>"},{"location":"github/#ruff","title":"Ruff","text":"<p>Ruff has there own pre commit hooks we've included, to enforce formatting consitency on every commit.</p> <pre><code>hooks:\n  - id: ruff-check\n    args: [--fix --config=pyproject.toml]\n  - id: ruff-format\n    args: [--config=pyproject.toml]\n</code></pre>"},{"location":"github/#references","title":"References","text":"<ul> <li>GitHub Templates</li> <li>Dependabot Quickstart Guide</li> <li>GitHub Actions Documentation</li> <li>GitHub Pre Commit Hooks</li> <li>GitHub Actions Documentation</li> </ul>"},{"location":"installation/","title":"\ud83d\udce6 Installation","text":"<p>Make sure you have uv installed before you start.</p> <p>Create new project:</p> <pre><code>uvx cookiecutter gh:wyattferguson/pattern\n</code></pre> <p>Alternatively you can use Cruft:</p> <pre><code>uvx cruft create gh:wyattferguson/pattern\n</code></pre> <p>Then just follow the prompts, pick the tools you want to install, and watch the magic happen.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>UV - An extremely fast Python package and project manager.</li> <li>GitHub Account - A GitHub account is not necessarily required but is highly encouraged.</li> </ul>"},{"location":"installation/#optional-requirements","title":"Optional Requirements","text":"<ul> <li>Docker</li> </ul>"},{"location":"installation/#references","title":"References","text":"<ul> <li>Cookiecutter</li> <li>UV Documentation</li> <li>Cruft Documentation</li> <li>Docker Getting Started</li> </ul>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025, Wyatt Ferguson</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"pypi/","title":"\ud83d\udce1 PyPI","text":"<p>A GitHub Action for publishing your package to PyPI it can be found at <code>.github/workflows/pypi-publish.yml</code>.</p>"},{"location":"pypi/#package-publishing","title":"Package Publishing","text":"<ol> <li>Register your project and create an API Token on PyPI.</li> <li>Add the API Token to your projects secrets with the name <code>PYPI_TOKEN</code></li> <li>Create a new release on Github.</li> <li>Create a new tag in the form <code>*.*.*</code>.</li> </ol>"},{"location":"pypi/#pypi-testing","title":"PyPI Testing","text":"<p>PyPI has a test package publishing index for you to work through any kinks before you go live.</p>"},{"location":"pypi/#references","title":"References","text":"<ul> <li>PyPI</li> <li>PyPI Testing</li> <li>GitHub Actions Guide</li> </ul>"},{"location":"testing/","title":"\ud83e\uddea Testing","text":"<p>We've included PyTest, Coverage, and Nox to give you a good base to build your testing from.</p>"},{"location":"testing/#pytest","title":"PyTest","text":"<p>PyTest is the gold standard for testing your code in Python and is included by default in your install. A empty test file is generated for you on install.</p> <p>To run all your tests we have included this handy command:</p> <pre><code>task tests\n</code></pre> <p>PyTest has a huge number of options and integrations, we highly recommend you check out PyTest Documentation.</p>"},{"location":"testing/#coverage","title":"Coverage","text":"<p>Coverage is included by default for every install. It works hand-in-hand with PyTest and measures how much of code is covered by your tests.</p> <p>All settings for Coverage are located in your <code>pyproject.toml</code>. Here are the included defaults:</p> <pre><code>[tool.coverage.report]\n# Skip files that have no executable code\nskip_empty = true\n\n# Show line numbers of code that wasn't executed.\nshow_missing = true\n\n# Show test failure, when coverage is under 100%\nfail_under = 100\n</code></pre> <p>To run a coverage test we have a built-in command to generate your report:</p> <pre><code>task coverage\n</code></pre> <p>Coverage has a huge amount of config options and types of reports it can generate. Visit the Coverage Documentation for more information.</p>"},{"location":"testing/#nox","title":"Nox","text":"<p>Nox is a very useful tool for running any array of tests across different Python environments and is included as an optional install.</p> <p>Include in our project <code>noxfile.py</code> is a basic script to run all your pytest tests against the most modern versions of Python. If you want to modify what versions it runs against you will find the list below in the file and simply tack it on to the list.</p> <pre><code>python_versions = [\"3.10\", \"3.11\", \"3.12\", \"3.13\"]\n</code></pre> <p>To run all your Nox scripts at once use the command:</p> <pre><code>task nox\n</code></pre>"},{"location":"testing/#references","title":"References","text":"<ul> <li>Nox Documentation</li> <li>PyTest Documentation</li> <li>Coverage Documentation</li> </ul>"}]}