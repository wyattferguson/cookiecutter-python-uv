
[project]
name = "{{cookiecutter.project_slug}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_description}}"
authors = [{ name = "{{cookiecutter.author}}", email = "{{cookiecutter.email}}" }]
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["python"]
requires-python = ">=3.13,<4"
classifiers = [
    "{{cookiecutter.development_status}}",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed",
]
dependencies = [
]

[dependency-groups]
dev = [
    {%- if cookiecutter.typechecker == 'ty' %}
    "ty>=0.0.1a9",
    {% else %}
    "mypy >=1.16.0",
    {%- endif %}
    {%- if cookiecutter.include_nox == 'y' %}
    "nox>=2025.5.1",
    {%- endif %}
    "pytest>=8.4.0",
    "coverage>=7.8.2",
    "ruff>=0.11.12",
    "taskipy>=1.14.1",
    {%- if cookiecutter.include_docs == 'y' %}
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings[python]>=0.26.1",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.2",
    {%- endif %}
    "pre-commit>=4.2.0",
]

[project.urls]
homepage = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.repository_name}}"
repository = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.repository_name}}.git"
{%- if cookiecutter.include_docs == 'y' %}
documentation = "https://{{cookiecutter.github_username}}.github.io/{{cookiecutter.repository_name}}"
{%- else %}
documentation = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.repository_name}}"
{%- endif %}
issues = "https://github.com/{{cookiecutter.github_username}}/{{cookiecutter.repository_name}}/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/{{cookiecutter.project_slug}}"]

[tool.taskipy.tasks]
format = "ruff format ./src/"
lint = "ruff check --fix ./src/"
{%- if cookiecutter.typechecker == 'ty' %}
type = "ty check"
{%- else %}
type = "mypy --strict ./src/"
{%- endif%}
{%- if cookiecutter.include_docs == 'y' %}
docs = "mkdocs build & task serve"
serve = "mkdocs serve"
doc_deploy = "mkdocs gh-deploy --force"
{%- endif %}
tests = "pytest --verbose --color=yes tests"
{%- if cookiecutter.include_nox == 'y' %}
nox = "nox -s tests"
{%- endif %}
coverage = "coverage html && coverage report -m"
run = "uv run ./src/{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}.py"

[tool.ruff]
line-length = 100
indent-width = 4
format.indent-style = "space"
target-version = "py313"
src = ["src", "tests"]

[tool.ruff.lint]
pydocstyle.convention = "google"
fixable = ["ALL"]
select = ["ALL"]
ignore = [
    "FA102", # Flake8-future-annotations
    "F401", # Disable fix for unused imports
    "B904", # Allow raising exceptions without from e
    "PLR0913", # too many arguments
    "CPY", # Flake8-copyright
    "T201", # Debugging print statements
    "ERA", # Eradicate â€“ detects commented-out code
    "BLE001", # Catch-all exceptions
    "D100", # missing docstring in public module
    "D105", # undocumented magic method
    "D107", # undocumented public init
    "D203", # incorrect-blank-line-before-class
    "D205", # line-between-summary-and-description
    "D212", # multi-line-summary-first-line
    "D400", # missing-trailing-period
    "D407", # missing-dashed-underline-after-section
    "S311", # rand-usage
]

{% if cookiecutter.typechecker == 'ty' %}
[tool.ty]
src.root = "./src"
environment.python = "./.venv"
terminal.output-format = "concise"
{%- else %}
[tool.mypy]
files = ["src", "tests"]
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = false
warn_unused_ignores = true
show_error_codes = true
{%- endif %}

[tool.coverage.paths]
source = ["src"]
tests = ["tests","*/tests"]

[tool.coverage.report]
skip_empty = true
show_missing = true
fail_under = 100

[tool.coverage.run]
branch = true
source = ["src", "tests"]